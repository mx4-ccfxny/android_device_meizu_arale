# inherit from the proprietary version
-include vendor/meizu/arale/BoardConfigVendor.mk

DEVICE_FOLDER_COMMON := device/meizu/arale

# Platform
TARGET_BOARD_PLATFORM := mt6595
TARGET_NO_BOOTLOADER := true

TARGET_LDPRELOAD += libxlog.so:libmtkabi.so

# Architecture
TARGET_ARCH := arm
TARGET_ARCH_VARIANT := armv7-a-neon
TARGET_CPU_ABI := armeabi-v7a
TARGET_CPU_ABI2 := armeabi
TARGET_CPU_SMP := true
TARGET_CPU_VARIANT := cortex-a7
ARCH_ARM_HAVE_NEON := true
ARCH_ARM_HAVE_VFP := true
ARCH_ARM_HAVE_TLS_REGISTER := true

# Bootloader
TARGET_BOOTLOADER_BOARD_NAME := mt6595

TARGET_USERIMAGES_USE_EXT4:=true
TARGET_USERIMAGES_SPARSE_EXT_DISABLED := false
BOARD_CACHEIMAGE_FILE_SYSTEM_TYPE := ext4

# Kernel
BOARD_KERNEL_CMDLINE :=
BOARD_KERNEL_BASE := 0x40000000
BOARD_KERNEL_PAGESIZE := 2048
BOARD_MKBOOTIMG_ARGS := \
	--base 0x40000000 \
	--pagesize 2048 \
	--kernel_offset 0x00008000 \
	--ramdisk_offset 0x04000000 \
	--second_offset 0x00f00000 \
	--tags_offset 0x0e000000 \
	--board 32

TARGET_PREBUILT_KERNEL := $(DEVICE_FOLDER_COMMON)/prebuilt/kernel
#BOARD_CUSTOM_BOOTIMG_MK := $(DEVICE_FOLDER_COMMON)/boot.mk
#BOARD_MKBOOTIMG_ARGS := --board 1419997733
#BOARD_CUSTOM_BOOTIMG := true

TARGET_KMODULES := true

COMMON_GLOBAL_CFLAGS += -DDISABLE_HW_ID_MATCH_CHECK

# Disable memcpy opt (for audio libraries)
TARGET_CPU_MEMCPY_OPT_DISABLE := true

# EGL
BOARD_EGL_CFG := $(DEVICE_FOLDER_COMMON)/configs/egl.cfg
USE_OPENGL_RENDERER := true
BOARD_EGL_WORKAROUND_BUG_10194508 := true

# MTK Hardware
BOARD_HAS_MTK_HARDWARE := true
MTK_HARDWARE := true
BOARD_USES_LEGACY_MTK_AV_BLOB := true
COMMON_GLOBAL_CFLAGS += -DMTK_HARDWARE -DADD_LEGACY_ACQUIRE_BUFFER_SYMBOL
COMMON_GLOBAL_CPPFLAGS += -DMTK_HARDWARE

BOARD_HAVE_OPENSOURCE_IMMVIBE := true
BOARD_HARDWARE_CLASS := $(DEVICE_FOLDER_COMMON)/cmhw

# Audio
# source-compiled TFA9890 support
NXP_SMARTPA_SUPPORT := tfa9890

# RIL
# moved to forked frameworks_opt_telephony repo
#BOARD_RIL_CLASS := ../../../$(DEVICE_FOLDER)/ril/
MTK_CIP_SUPPORT := yes
MTK_DT_SUPPORT := no
MTK_VT3G324M_SUPPORT := no
MTK_UMTS_TDD128_MODE := no
MTK_SHARE_MODEM_CURRENT := 1
MTK_SHARE_MODEM_SUPPORT := 2
MTK_MD_SHUT_DOWN_NT := yes
MTK_FD_SUPPORT := yes
MTK_IPV6_SUPPORT := yes
MTK_LTE_SUPPORT := yes
MTK_LTE_DC_SUPPORT := no
MTK_SVLTE_SUPPORT := no
MTK_EAP_SIM_AKA := yes
MTK_IRAT_SUPPORT := no
MTK_DTAG_DUAL_APN_SUPPORT := no
MTK_MD1_SUPPORT := 5
MTK_MD2_SUPPORT := 4
MTK_MD3_SUPPORT := 2
MTK_MD5_SUPPORT := 5
MTK_ENABLE_MD1 = yes
MTK_ENABLE_MD2 = no
MTK_ENABLE_MD3 = no
MTK_ENABLE_MD5 = no
MTK_TC1_FEATURE := no
MTK_SIM_RECOVERY := yes
MTK_SIM_HOT_SWAP_COMMON_SLOT := no
MTK_WORLD_PHONE := yes
MTK_VOLTE_SUPPORT := yes
MTK_VILTE_SUPPORT := yes
MTK_WIFI_CALLING_RIL_SUPPORT := yes
COMMON_GLOBAL_CFLAGS += \
	-DMTK_CIP_SUPPORT=1 \
	-DMTK_SHARE_MODEM_CURRENT=1 \
	-DMTK_SHARE_MODEM_SUPPORT=2 \
	-DMTK_MD_SHUTDOWN_NT=1 \
	-DMTK_FD_SUPPORT=1 \
	-DMTK_IPV6_SUPPORT=1 \
	-DMTK_LTE_SUPPORT=1 \
	-DMTK_EAP_SIM_AKA=1 \
	-DMTK_MD1_SUPPORT=5 \
	-DMTK_MD2_SUPPORT=4 \
	-DMTK_MD3_SUPPORT=2 \
	-DMTK_MD5_SUPPORT=5 \
	-DMTK_ENABLE_MD1=1 \
	-DMTK_SIM_RECOVERY=1 \
	-DMTK_WORLD_PHONE=1 \
	-DMTK_VOLTE_SUPPORT=1 \
	-DMTK_VILTE_SUPPORT=1 \
	-DMTK_WIFI_CALLING_RIL_SUPPORT=1 \

COMMON_GLOBAL_CPPFLAGS += \
	-DMTK_CIP_SUPPORT=1 \
	-DMTK_SHARE_MODEM_CURRENT=1 \
	-DMTK_SHARE_MODEM_SUPPORT=2 \
	-DMTK_MD_SHUTDOWN_NT=1 \
	-DMTK_FD_SUPPORT=1 \
	-DMTK_IPV6_SUPPORT=1 \
	-DMTK_LTE_SUPPORT=1 \
	-DMTK_EAP_SIM_AKA=1 \
	-DMTK_MD1_SUPPORT=5 \
	-DMTK_MD2_SUPPORT=4 \
	-DMTK_MD3_SUPPORT=2 \
	-DMTK_MD5_SUPPORT=5 \
	-DMTK_ENABLE_MD1=1 \
	-DMTK_SIM_RECOVERY=1 \
	-DMTK_WORLD_PHONE=1 \
	-DMTK_VOLTE_SUPPORT=1 \
	-DMTK_VILTE_SUPPORT=1 \
	-DMTK_WIFI_CALLING_RIL_SUPPORT=1 \

BOARD_CONNECTIVITY_VENDOR := MediaTek
BOARD_CONNECTIVITY_MODULE := conn_soc

# WIFI
WPA_SUPPLICANT_VERSION := VER_0_8_X
BOARD_HOSTAPD_DRIVER := NL80211
BOARD_HOSTAPD_PRIVATE_LIB := lib_driver_cmd_mt66xx
BOARD_WPA_SUPPLICANT_DRIVER := NL80211
BOARD_WPA_SUPPLICANT_PRIVATE_LIB := lib_driver_cmd_mt66xx
WIFI_DRIVER_FW_PATH_PARAM:="/dev/wmtWifi"
WIFI_DRIVER_FW_PATH_STA:=STA
WIFI_DRIVER_FW_PATH_AP:=AP
WIFI_DRIVER_FW_PATH_P2P:=P2P

# Bluetooth
BOARD_HAVE_BLUETOOTH := true
BOARD_HAVE_BLUETOOTH_MTK := true
BOARD_BLUETOOTH_DOES_NOT_USE_RFKILL := true
BOARD_BLUETOOTH_BDROID_BUILDCFG_INCLUDE_DIR := $(DEVICE_FOLDER_COMMON)/bluetooth

# Digital Restrictions Management
MTK_WVDRM_SUPPORT := yes
MTK_WVDRM_L1_SUPPORT := no

# Power and native tap-to-wake
TARGET_POWERHAL_VARIANT := mtk-xen0n
TARGET_POWER_SET_FEATURE_LIB := power-feature-arale

# system.prop
TARGET_SYSTEM_PROP := $(DEVICE_FOLDER_COMMON)/system.prop

# CWM
TARGET_RECOVERY_FSTAB := $(DEVICE_FOLDER_COMMON)/root/recovery.fstab
BOARD_HAS_NO_SELECT_BUTTON := true
TARGET_RECOVERY_PIXEL_FORMAT := "RGBA_8888"
BOARD_USE_FRAMEBUFFER_ALPHA_CHANNEL := true
TARGET_DISABLE_TRIPLE_BUFFERING := false
#BOARD_CUSTOM_GRAPHICS := $(DEVICE_FOLDER)/recovery/graphics.cwmt.c
RECOVERY_FONT := roboto_15x24.h

# TWRP
# disabled due to graphics problem... can't open fb
#RECOVERY_VARIANT=twrp
#DEVICE_RESOLUTION := 1152x1920
DEVICE_RESOLUTION := 1080x1920
TW_NO_USB_STORAGE := true
RECOVERY_GRAPHICS_USE_LINELENGTH := true
TW_NO_REBOOT_BOOTLOADER := true
TW_BRIGHTNESS_PATH := /sys/devices/platform/leds-mt65xx/leds/lcd-backlight/brightness
TW_MAX_BRIGHTNESS := 255
TW_CUSTOM_CPU_TEMP_PATH := /sys/devices/virtual/thermal/thermal_zone1/temp
#BOARD_CUSTOM_GRAPHICS := \
#	../../../$(DEVICE_FOLDER)/recovery/graphics.c \
#	../../../$(DEVICE_FOLDER)/recovery/graphics_adf.c \
#	../../../$(DEVICE_FOLDER)/recovery/graphics_fbdev.c
#TW_BOARD_CUSTOM_GRAPHICS := ../../../$(DEVICE_FOLDER)/recovery/graphics.twrp.c
#TW_INTERNAL_STORAGE_PATH := "/emmc"
#TW_INTERNAL_STORAGE_MOUNT_POINT := "emmc"
#TW_EXTERNAL_STORAGE_PATH := "/sdcard"
#TW_EXTERNAL_STORAGE_MOUNT_POINT := "sdcard"

TARGET_USE_CUSTOM_LUN_FILE_PATH := "/sys/devices/virtual/android_usb/android0/f_mass_storage/lun%d/file"


# SELinux
BOARD_SEPOLICY_DIRS += \
    $(DEVICE_FOLDER_COMMON)/sepolicy

# NOTE: remove this once Marshmallow kernel is available
POLICYVERS := 29

# Hack for building without kernel sources
ifeq ($(TARGET_DEVICE),arale)
$(shell mkdir -p $(OUT)/obj/KERNEL_OBJ/usr)
endif
ifeq ($(TARGET_DEVICE),mx4)
$(shell mkdir -p $(OUT)/obj/KERNEL_OBJ/usr)
endif
