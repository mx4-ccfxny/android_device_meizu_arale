# MTK project .rc configure

import init.${ro.hardware}.usb.rc

on init
    mkdir /mnt/media_rw/usbotg 0700 media_rw media_rw
    mkdir /storage/usbotg 0700 root root

# on post-fs-data  -- moved to proj-dev-setup invocation in init.mt6595.rc

# Encrypt phone function
#    setprop vold.post_fs_data_done 1

#on init
    # Refer to http://source.android.com/devices/tech/storage/index.html
    # It said, "Starting in Android 4.4, multiple external storage devices are surfaced to developers through
    #           Context.getExternalFilesDirs(), Context.getExternalCacheDirs(), and Context.getObbDirs().
    #           External storage devices surfaced through these APIs must be a semi-permanent part of the device (such as an SD card slot in a battery compartment).
    #           Developers expect data stored in these locations to be available over long periods of time."
    # Therefore, if the target doesn't support sd hot-plugging (Ex: the SD card slot in a battery compartment), we need to export SECONDARY_STORAGE in 'boot' section
    #
    # export SECONDARY_STORAGE /storage/sdcard1

service atci_service /system/bin/atci_service 
	socket atci-service stream 660 radio system 
	socket atci-serv-fw stream 660 radio system 
	user root 
        disabled
	group radio system                         
service atcid-daemon-u /system/bin/atcid
	user system
	group radio system media
	disabled
	oneshot

service atcid-daemon-e /system/bin/atcid
	user root
	group radio system
	disabled
	oneshot

on early_property:ro.build.type=eng
start atci_service
start atcid-daemon-e
service audio-daemon /system/bin/audiocmdservice_atci
    class main
    socket atci-audio stream 660 media system
    user media
    group nvram media system sdcard_rw
    disabled
    oneshot

service fuse_usbotg /system/bin/sdcard -u 1023 -g 1023 -w 1023 -d /mnt/media_rw/usbotg /storage/usbotg
    class late_start
    disabled

#
# Connectivity related services (Begin)
#

service wmt_loader /system/bin/wmt_loader
	class core
	user root
	group root
	oneshot

service 66xx_launcher /system/bin/6620_launcher -m 4 -p /system/etc/firmware/
    user system
    group system
    class core


#
# Connectivity related services (End)
#

#FLYME:fanjun@SHELL.HapticFeedback.Feature {@
on init
    chown system system /dev/tspdrv
    chmod 0660 /dev/tspdrv

    mkdir /dev/pipes 0771 system system
    export VIBE_PIPE_PATH /dev/pipes

# TouchSense Player Service -- now minimally working without blob!
service openimmvibed /system/bin/openimmvibed
    class main
    #user root
    #group root
    user system
    group system
    oneshot

# but we still want to coexist with the original blob, in case some apps
# with bundled ImmVibeJ wants to talk with the vibrator directly.
service immvibed /system/bin/immvibed -p 99 -u 1000
    class main
    user root
    group root
    oneshot
#@}

# Proximity sensor calibration as a Service!
service ps_calibrate /system/bin/meizupshelper c
    class main
    user root
    group root
    oneshot
